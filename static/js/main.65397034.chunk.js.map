{"version":3,"sources":["logo.svg","components/Page1.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Page1","onRouteChange","pageName","pages","name","className","src","logo","alt","map","key","onClick","toLowerCase","App","useState","route","setRoute","Component","setComponent","handlePage","p","r","pagesConfig","newRoute","then","Page2","Page3","default","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,0LCc5BC,EAVD,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAH,IAAkBC,gBAAlB,MAA2B,QAA3B,MAAoCC,aAApC,MAA0C,CAAC,CAAEC,KAAM,SAAU,CAAEA,KAAM,UAArE,SACV,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cAClB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,YAAYH,IAEzBC,EAAMM,KAAI,gBAAEL,EAAF,EAAEA,KAAF,OAAU,4BAAQM,IAAKN,EAAMO,QAAS,kBAAIV,EAPrC,UAOgEG,EAPrDQ,kBAO8DR,QCmBlFS,MAzBf,WAAgB,IAAD,EACaC,mBAAS,SADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,qBAFrB,mBAENG,EAFM,KAEKC,EAFL,KAGPC,EAAa,SAACC,EAAGC,GACrBH,EAAaE,GACbJ,EAASK,IAWLC,EAAc,CAACrB,cATC,SAAAsB,GACH,UAAbA,EACFP,EAASO,GACa,UAAbA,EACT,6BAA6BC,MAAK,SAAAC,GAAK,OAAIN,EAAWM,EAAOF,MACvC,UAAbA,GACT,6BAA6BC,MAAK,SAAAE,GAAK,OAAIP,EAAWO,EAAOH,QAIjE,OAAQR,GACN,IAAK,QACH,OAAO,kBAAC,EAAUO,GACpB,QACE,OAAO,kBAACL,EAAUU,QAAYL,KCbhBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,kB","file":"static/js/main.65397034.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from '../logo.svg';\n\nconst getPageRoute = url => `${url.toLowerCase()}`\nconst Page1 = ({ onRouteChange, pageName=\"Page1\", pages=[{ name: 'Page2' },{ name: 'Page3' }] }) => (\n    <div className=\"App\">\n        <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1 className=\"App-link\">{pageName}</h1>\n        </header>\n        {pages.map(({name})=><button key={name} onClick={()=>onRouteChange(getPageRoute(name))}>{name}</button>)}\n    </div>\n)\n\nexport default Page1\n","import React, { useState } from 'react';\nimport './App.css';\nimport Page1 from './components/Page1';\n\nfunction App() {\n  const [route, setRoute] = useState('page1')\n  const [Component, setComponent] = useState()\n  const handlePage = (p, r) => {\n    setComponent(p)\n    setRoute(r)\n  }\n  const onRouteChange = newRoute => {\n    if (newRoute === 'page1') {\n      setRoute(newRoute)\n    } else if (newRoute === 'page2') {\n      import('./components/Page2').then(Page2 => handlePage(Page2, newRoute))\n    } else if (newRoute === 'page3') {\n      import('./components/Page3').then(Page3 => handlePage(Page3, newRoute))\n    }\n  }\n  const pagesConfig = {onRouteChange}\n  switch (route) {\n    case 'page1':\n      return <Page1 {...pagesConfig} />\n    default:\n      return <Component.default {...pagesConfig} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}